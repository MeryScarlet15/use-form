{"version":3,"sources":["constants/screens.ts","hooks/useDetectDesktop/use-detect-platform.tsx","components/text/heading-element/heading-element.tsx","components/text/heading3/heading3.ts","components/text/heading4/heading4.ts","assets/colors/colors.tsx","components/card-text/card-text-style.ts","components/card-text/card-text.tsx","components/text/heading2/heading2.ts","constants/routes.ts","pages/home/home-style.ts","pages/home/home.tsx","components/svg/svg-style.ts","components/svg/svg.tsx","components/text/body-text/body-text.ts","components/buttons/main-button/main-button-style.ts","components/buttons/main-button/main-button.tsx","components/buttons/button-color/button-color-style.ts","components/buttons/button-color/button-color.tsx","components/modals/main-modal/main-modal-style.ts","components/modals/main-modal/main-modal.tsx","components/modals/modal-success/modal-success-style.ts","components/modals/modal-success/modal-success.tsx","components/input-text/input-text-style.ts","components/text/label-text/label-text.ts","components/input-text/input-text.tsx","containers/handle-values-form/handle-values-form-style.ts","containers/handle-values-form/handle-values-form.tsx","hooks/useForm/use-form.ts","hooks/useForm/use-form-validations.ts","pages/handle-values/handle-values-style.ts","pages/handle-values/handle-values.tsx","components/main-header/main-header-style.ts","components/main-header/main-header.tsx","components/main-layout/main-layout-style.ts","components/main-layout/main-layout.tsx","containers/handle-value-form/handle-value-form-style.ts","containers/handle-value-form/handle-value-form.tsx","pages/handle-value/handle-value-style.ts","pages/handle-value/handle-value.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["screenSizes","DEFAULT_PLATFORM_WIDTHS","maxMobile","useDetectPlatform","platformWidths","useState","platform","setPlatform","maxIpad","useEffect","calculateDimensions","window","addEventListener","windowWidth","document","children","clientWidth","hasMobileDimensions","HeadingElement","props","heading","text","element","content","Heading3","styled","div","Heading4","colors","CardTextContainer","CardText","className","Heading2","routes","HomeContainer","HomePage","to","SvgContainer","Svg","src","BodyText","MainButtonContainer","height","MainButton","id","onClick","role","form","type","handleClick","event","ButtonColorContainer","color","primary","secondary","HEIGHTS","small","medium","large","isSvg","imgUrl","urlSplited","split","length","includes","ButtonColor","icon","mainButtonProps","left","alt","right","MainModalContainer","MainModal","ariaLabelledBy","ariaDescribedBy","ariaModal","aria-modal","aria-labelledBy","undefined","aria-describedBy","ModalSuccessContainer","ModalSuccess","open","onClose","description","headingType","title","InputTextContainer","LabelText","useInputText","value","events","label","disabled","format","initialValue","isInputActive","setIsInputActive","inputRef","useRef","changeIsInputActive","show","current","childNodes","focus","scrollingElement","body","documentElement","innerHeight","input","offsetTop","useLabelAnimation","inputValue","setInputValue","changeInputValue","newInputValue","useInputValue","handleChange","target","onChange","handleBlur","onBlur","InputText","errorText","placeholder","ref","aria-label","options","HandleValuesFormContainer","HandleValuesForm","formActions","onSubmit","preventDefault","values","name","handleFieldEvent","errorValues","surname","email","handleFillButton","useForm","params","errorTextForm","setErrorTextForm","initialValues","formValidations","submit","setValues","initialErrors","Object","keys","map","key","error","setErrorValues","val","newError","valueValidation","find","validation","method","forceErrorValues","newErrorValues","resetErrorValues","setAGroupOfValues","newValues","changedValues","newValueKey","indexOf","newValue","useValues","changeErrorTextForm","textError","valid","inputError","validateForm","changeErrorText","defaultErrorValue","validations","require","Validator","RequiredValidation","tag","EmailValidation","isEmail","HandleValuesPageContainer","requiredValidation","HandleValuesPage","actions","submitModal","setSubmitModal","console","log","useHandleValuesForm","MainHeaderContainer","MainHeader","MainLayoutContainer","MainLayout","HandleValueFormContainer","HandleValueForm","HandleValuePageContainer","HandleValuePage","useHandleValueForm","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b6edd235.chunk.js","sourcesContent":["export const screenSizes = {\r\n  ipad: 480,\r\n  ipadPro: 728,\r\n  laptop: 1024,\r\n  desktop: 1200,\r\n  ultraDesktop: 1600,\r\n};","import { useState, useEffect } from \"react\";\r\nimport {\r\n  IDesktopPlatform,\r\n  IPlatform,\r\n  IUseDetectPlatform,\r\n} from \"./use-detect-platform-types\";\r\n\r\nconst DEFAULT_PLATFORM_WIDTHS: IDesktopPlatform = {\r\n  maxMobile: 480,\r\n};\r\n\r\nexport const useDetectPlatform: IUseDetectPlatform = (\r\n  platformWidths: IDesktopPlatform = DEFAULT_PLATFORM_WIDTHS,\r\n) => {\r\n  const [platform, setPlatform] = useState<IPlatform>(\"mobile\");\r\n  const { maxIpad, maxMobile } = platformWidths;\r\n\r\n  useEffect(() => {\r\n    setPlatform(calculateDimensions());\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n      setPlatform(calculateDimensions());\r\n    });\r\n  }, []);\r\n\r\n  const calculateDimensions = () => {\r\n    const windowWidth = document.children[0].clientWidth;\r\n    const hasMobileDimensions = windowWidth < maxMobile;\r\n    const hasIpadDimensions =\r\n      maxIpad && !hasMobileDimensions && windowWidth < maxIpad;\r\n\r\n    if (hasMobileDimensions) {\r\n      return \"mobile\";\r\n    } else if (hasIpadDimensions) {\r\n      return \"ipad\";\r\n    } else {\r\n      return \"desktop\";\r\n    }\r\n  };\r\n\r\n  return {\r\n    platform,\r\n  };\r\n};\r\n","import React from \"react\"\r\nimport { Markup } from 'interweave';\r\n\r\n\r\nexport type THeadings = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p'\r\n\r\ninterface HeadingElementProps {\r\n  heading: THeadings,\r\n  text: string;\r\n}\r\nconst HeadingElement: React.FC<HeadingElementProps> = (props: HeadingElementProps) => {\r\n  const {\r\n    heading,\r\n    text\r\n  } = props;\r\n  const element = `<${heading}>${text}</${heading}>`\r\n  return <Markup content={element} />\r\n}\r\n\r\nexport default HeadingElement;","import styled from \"styled-components\";\r\n\r\nconst Heading3 = styled.div`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 32px;\r\n  line-height: 39px;\r\n`;\r\n\r\nexport default Heading3;\r\n","import styled from \"styled-components\";\r\n\r\nconst Heading4 = styled.div`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 29px;\r\n`;\r\n\r\nexport default Heading4;\r\n","export const colors = {\r\n  black: '#181824',\r\n  background: '#2f3046',\r\n  lightBlue: '#d7ffff',\r\n  blue: '#b5f3ff',\r\n  blueMedium: '#54c8f9',\r\n  lightGrey: '#EEEEEE',\r\n  midGrey: '#AAAAAA',\r\n  hardGrey: '#666666',\r\n  white: '#FFFFFF',\r\n  red: '#F23838',\r\n  lightRed: \"#F2C9CC\"\r\n}","import styled from 'styled-components'\r\nimport { colors } from '../../assets/colors/colors';\r\nimport { screenSizes } from '../../constants/screens';\r\n\r\nconst CardTextContainer = styled.div`\r\n  width: 100%; \r\n  background: ${colors.background}; \r\n  border-radius: 8px;\r\n  transition: 0.3s all ease-in-out;\r\n  display: flex; \r\n  align-items: center; \r\n  justify-content: center; \r\n  height: 240px; \r\n  cursor: pointer; \r\n\r\n  .card-text-title {\r\n    color: ${colors.lightGrey};\r\n  }\r\n\r\n  &:hover {\r\n    border: 1px solid ${colors.lightBlue};\r\n    transition: 0.3s all ease-in-out;\r\n\r\n    .card-text-title {\r\n      color: ${colors.lightBlue};\r\n    }\r\n  }\r\n\r\n\r\n  @media screen and (min-width: ${screenSizes.ipad}px){ \r\n    height: 343px; \r\n  }\r\n`\r\nexport default CardTextContainer;","import React from 'react'\r\nimport { screenSizes } from '../../constants/screens'\r\nimport { useDetectPlatform } from '../../hooks/useDetectDesktop/use-detect-platform'\r\nimport HeadintElement, { THeadings } from '../text/heading-element/heading-element'\r\nimport Heading3 from '../text/heading3/heading3'\r\nimport Heading4 from '../text/heading4/heading4'\r\nimport CardTextContainer from './card-text-style'\r\n\r\ninterface CardTextProps {\r\n  text: string;\r\n  heading: THeadings\r\n}\r\nconst CardText: React.FC<CardTextProps> = (props: CardTextProps) => {\r\n  const { text, heading } = props;\r\n  const { platform } = useDetectPlatform({ maxMobile: screenSizes.ipad });\r\n\r\n  return <CardTextContainer>\r\n    {\r\n      platform === \"mobile\" ?\r\n        <Heading4 className=\"card-text-title\">\r\n          <HeadintElement\r\n            heading={heading}\r\n            text={text}\r\n          />\r\n        </Heading4>\r\n        :\r\n        <Heading3 className=\"card-text-title\">\r\n          <HeadintElement\r\n            heading={heading}\r\n            text={text}\r\n          />\r\n        </Heading3>\r\n    }\r\n\r\n  </CardTextContainer>\r\n}\r\n\r\nexport default CardText;","import styled from \"styled-components\";\r\n\r\nconst Heading2 = styled.div`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 40px;\r\n  line-height: 49px;\r\n`;\r\n\r\nexport default Heading2;\r\n","export const routes = {\r\n  home: '/',\r\n  handleValue: '/handle-value',\r\n  handleValues: '/handle-values'\r\n}","import styled from 'styled-components'\r\nimport { colors } from '../../assets/colors/colors'\r\nimport { screenSizes } from '../../constants/screens'\r\n\r\nconst HomeContainer = styled.div`\r\n  margin: 24px 16px; \r\n\r\n  @media screen and (min-width: ${screenSizes.ipad}px){ \r\n    margin: 64px 7%; \r\n  }\r\n\r\n  .home-title {\r\n    text-align: center; \r\n    color: ${colors.white};\r\n    margin-bottom: 24px;\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      margin-bottom: 32px;\r\n    }\r\n  }\r\n\r\n  //TODO: examples > 4 , parse to display grid\r\n  .list-examples {\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      display: flex; \r\n      align-items: center; \r\n      justify-content: center; \r\n    }\r\n\r\n    .example {\r\n      margin-bottom: 24px; \r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n\r\n       @media screen and (min-width: ${screenSizes.ipad}px){ \r\n        width: calc((100% - 24px) / 2);\r\n        margin-right: 24px;\r\n        margin-bottom: 0;\r\n\r\n         &:last-child {\r\n          margin-right: 0;\r\n        }\r\n       }\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport default HomeContainer","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport CardText from '../../components/card-text/card-text';\r\nimport Heading2 from '../../components/text/heading2/heading2';\r\nimport Heading3 from '../../components/text/heading3/heading3';\r\nimport { routes } from '../../constants/routes';\r\nimport { screenSizes } from '../../constants/screens';\r\nimport { useDetectPlatform } from '../../hooks/useDetectDesktop/use-detect-platform';\r\nimport HomeContainer from './home-style';\r\n\r\nconst HomePage: React.FC = () => {\r\n  const { platform } = useDetectPlatform({ maxMobile: screenSizes.ipad });\r\n\r\n  return <HomeContainer>\r\n    {platform === \"mobile\" ?\r\n      <Heading3 className=\"home-title\">\r\n        <h1>Test the useForm Hook!</h1>\r\n      </Heading3>\r\n      :\r\n      <Heading2 className=\"home-title\">\r\n        <h1>Test the useForm Hook!</h1>\r\n      </Heading2>\r\n    }\r\n\r\n    <ul className=\"list-examples\">\r\n      <li className=\"example\">\r\n        <Link\r\n          className=\"example-link\"\r\n          to={routes.handleValue}\r\n        >\r\n          <CardText\r\n            text=\"HandleFieldEvent\"\r\n            heading=\"h2\"\r\n          />\r\n        </Link>\r\n      </li>\r\n\r\n      <li className=\"example\">\r\n        <Link\r\n          className=\"example-link\"\r\n          to={routes.handleValues}\r\n        >\r\n          <CardText\r\n            text=\"SetAGroupOfValues\"\r\n            heading=\"h2\"\r\n          />\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </HomeContainer>\r\n}\r\n\r\nexport default HomePage; ","import styled from \"styled-components\";\r\n\r\nconst SvgContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .svg-component {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    div {\r\n      width: 100%;\r\n      height: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SvgContainer;\r\n","import React from \"react\";\r\nimport { ReactSVG } from \"react-svg\";\r\nimport SvgContainer from \"./svg-style\";\r\n\r\ninterface SvgProps {\r\n  src: string;\r\n}\r\n\r\nconst Svg: React.FC<SvgProps> = (props: SvgProps) => {\r\n  const { src } = props;\r\n  return (\r\n    <SvgContainer>\r\n      <ReactSVG src={src} className=\"svg-component\" />\r\n    </SvgContainer>\r\n  );\r\n};\r\n\r\nexport default Svg;\r\n","import styled from \"styled-components\";\r\n\r\nconst BodyText = styled.div`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 19px;\r\n`;\r\n\r\nexport default BodyText;\r\n","import styled from \"styled-components\";\r\nimport BodyText from \"../../text/body-text/body-text\";\r\n\r\ninterface Props {\r\n  height: string; \r\n}\r\n\r\nconst MainButtonContainer = styled(BodyText as any)<Props>`\r\n  width: 100%;\r\n  height: ${props => props.height};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer; \r\n`;\r\n\r\nexport default MainButtonContainer;\r\n","import React from \"react\";\r\nimport MainButtonContainer from \"./main-button-style\";\r\n\r\nexport type TMainButtonRole = 'link' | 'button'\r\n\r\nexport interface MainButtonProps {\r\n  id: string;\r\n  onClick?: (event: any) => void;\r\n  height?: string;\r\n  role?: TMainButtonRole;\r\n  form?: string;\r\n  type?: 'primary' | 'secondary';\r\n  children?: any\r\n}\r\n\r\nconst MainButton: React.FC<MainButtonProps> = (props: MainButtonProps) => {\r\n  const {\r\n    id,\r\n    onClick,\r\n    role,\r\n    form,\r\n    height,\r\n    type\r\n  } = props;\r\n\r\n  const handleClick = (event: any) => {\r\n    if (onClick) {\r\n      onClick(event);\r\n    }\r\n  }\r\n\r\n  return <MainButtonContainer\r\n    id={id}\r\n    height={height || '100%'}\r\n    role={role || 'button'}\r\n    form={form || ''}\r\n    onClick={(event: any) => handleClick(event)}\r\n    type={type || 'primary'}\r\n  >\r\n    {props.children}\r\n  </MainButtonContainer>\r\n  \r\n};\r\n\r\nexport default MainButton;\r\n","import styled from 'styled-components'\r\nimport BodyText from '../../text/body-text/body-text'\r\n\r\ninterface Props {\r\n  color: {\r\n    primary: string;\r\n    secondary: string;\r\n    text: string;\r\n  };\r\n}\r\nconst ButtonColorContainer = styled(BodyText as any) <Props>`\r\n  background: ${props => props.color.primary};\r\n  width: 100%; \r\n  height: 100%; \r\n  border-radius: 4px; \r\n  color: ${props => props.color.text};\r\n  border: 1px solid ${props => props.color.primary};\r\n  transition: 0.2s all ease-in-out;\r\n  display: flex; \r\n  align-items: center; \r\n  justify-content: center; \r\n\r\n  .button-color-icon-left {\r\n    width: 16px; \r\n    min-width: 16px; \r\n    max-height: 16px; \r\n    margin-right: 8px; \r\n    display: flex; \r\n    align-items: center; \r\n    justify-content: center; \r\n    \r\n    svg {\r\n      width: 16px; \r\n    }\r\n\r\n    img {\r\n      width: 16px; \r\n    }\r\n  }\r\n\r\n  .button-color-icon-right {\r\n    width: 16px;\r\n    min-width: 16px;\r\n    max-height: 16px;\r\n    margin-left: 8px; \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  &:hover {\r\n    background: ${props => props.color.secondary};\r\n    color: ${props => props.color.primary};\r\n    transition: 0.2s all ease-in-out;\r\n  }\r\n\r\n  &.secondary {\r\n    background: ${props => props.color.secondary};\r\n    color: ${props => props.color.text};\r\n    transition: 0.2s all ease-in-out;\r\n\r\n    &:hover {\r\n      background: ${props => props.color.primary};\r\n      color: ${props => props.color.primary};\r\n      transition: 0.2s all ease-in-out;\r\n    }\r\n  }\r\n`\r\nexport default ButtonColorContainer","import React from 'react'\r\nimport Svg from '../../svg/svg';\r\nimport MainButton, { MainButtonProps } from '../main-button/main-button';\r\nimport ButtonColorContainer from './button-color-style';\r\n\r\ntype TButtonColorHeight = 'small' | 'medium' | 'large';\r\n\r\ninterface ButtonColorProps extends MainButtonProps {\r\n  text: string;\r\n  height?: TButtonColorHeight;\r\n  color: {\r\n    primary: string;\r\n    secondary?: string;\r\n    text?: string;\r\n  };\r\n  icon?: {\r\n    left?: string;\r\n    right?: string;\r\n  }\r\n}\r\n\r\nconst HEIGHTS: { [key: string]: string } = {\r\n  small: '32px',\r\n  medium: '44px',\r\n  large: '56px'\r\n}\r\n\r\nconst isSvg = (imgUrl: string) => {\r\n  const urlSplited = imgUrl.split('.')\r\n  const splitedLenght = urlSplited.length;\r\n  const format = urlSplited[splitedLenght - 1];\r\n\r\n  if (format.includes('svg')) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst ButtonColor: React.FC<ButtonColorProps> = (props: ButtonColorProps) => {\r\n  const {\r\n    id,\r\n    onClick,\r\n    role,\r\n    form,\r\n    height,\r\n    type,\r\n    text,\r\n    color,\r\n    icon\r\n  } = props;\r\n\r\n  const mainButtonProps: MainButtonProps = {\r\n    id,\r\n    onClick,\r\n    role,\r\n    form,\r\n    type,\r\n    height: HEIGHTS[(height || 'medium')]\r\n  }\r\n\r\n  return <MainButton {...mainButtonProps}>\r\n    <ButtonColorContainer color={{ ...color }} className={type || 'primary'}>\r\n      {icon?.left &&\r\n        <div className=\"button-color-icon-left\">\r\n          {icon?.left && isSvg(icon.left) ? (\r\n            <Svg src={icon.left} />\r\n          ) : (\r\n            <img src={icon.left} alt=\"button-color-icon-left\" />\r\n          )}\r\n        </div>\r\n      }\r\n      <p>{text}</p>\r\n\r\n      {\r\n        icon?.right &&\r\n        <div className=\"button-color-icon-right\">\r\n          {icon?.right && isSvg(icon.right) ? (\r\n            <Svg src={icon.right} />\r\n          ) : (\r\n            <img src={icon.right} alt=\"button-color-icon-right\" />\r\n          )}\r\n        </div>\r\n      }\r\n    </ButtonColorContainer>\r\n  </MainButton>\r\n\r\n}\r\n\r\nexport default ButtonColor;","import styled from 'styled-components'\r\n\r\nconst MainModalContainer = styled.div`\r\n  position: fixed; \r\n  top: 0; \r\n  left: 0; \r\n  width: 100%; \r\n  height: 100%; \r\n  display: flex; \r\n  align-items: center; \r\n  justify-content: center; \r\n  background: rgba(0,0,0,0.5);\r\n`\r\n\r\nexport default MainModalContainer;","import React from 'react'\r\nimport MainModalContainer from './main-modal-style';\r\n\r\nexport interface IDialogArias {\r\n  ariaLabelledBy?: string;\r\n  ariaDescribedBy?: string;\r\n  ariaModal: boolean;\r\n  className?: string;\r\n}\r\n\r\ninterface MainModalProps extends IDialogArias {\r\n  children: any;\r\n}\r\n\r\nconst MainModal: React.FC<MainModalProps> = (props: MainModalProps) => {\r\n  const {\r\n    ariaLabelledBy,\r\n    ariaDescribedBy,\r\n    ariaModal,\r\n    className\r\n  } = props;\r\n\r\n  return <MainModalContainer className=\"main-modal-container\">\r\n    <div\r\n      className={`main-modal ${className || ''}`}\r\n      role=\"dialog\"\r\n      aria-modal={ariaModal || false}\r\n      aria-labelledBy={ariaLabelledBy || undefined}\r\n      aria-describedBy={ariaDescribedBy || undefined}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  </MainModalContainer>\r\n}\r\n\r\nexport default MainModal;","import styled from \"styled-components\";\r\nimport { colors } from \"../../../assets/colors/colors\";\r\n\r\nconst ModalSuccessContainer = styled.div`\r\n  .modal-success-dialog {\r\n    width: 50%;\r\n    min-width: 400px;\r\n    max-width: 500px;\r\n    background: ${colors.white};\r\n    border-radius: 8px;\r\n    padding: 24px; \r\n    padding-top: 16px; \r\n  }\r\n\r\n  .modal-success-topbar {\r\n    margin-bottom: 16px; \r\n  }\r\n\r\n  .modal-success-content {\r\n    .modal-success-description {\r\n      margin-bottom: 24px; \r\n    }\r\n\r\n    .modal-success-button {\r\n      width: 144px; \r\n      margin: 0 auto; \r\n    }\r\n  }\r\n`\r\n\r\nexport default ModalSuccessContainer;","import React from 'react'\r\nimport { colors } from '../../../assets/colors/colors';\r\nimport ButtonColor from '../../buttons/button-color/button-color';\r\nimport ButtonError from '../../buttons/button-error/button-error';\r\nimport BodyText from '../../text/body-text/body-text';\r\nimport HeadingElement, { THeadings } from '../../text/heading-element/heading-element';\r\nimport Heading4 from '../../text/heading4/heading4';\r\nimport MainModal from '../main-modal/main-modal';\r\nimport ModalSuccessContainer from './modal-success-style';\r\n\r\ninterface ModalSuccessProps {\r\n  onClose: () => void;\r\n  open: boolean;\r\n  title: string;\r\n  description: string;\r\n  className: string;\r\n  headingType: THeadings\r\n}\r\n\r\nconst ModalSuccess: React.FC<ModalSuccessProps> = (props: ModalSuccessProps) => {\r\n  const {\r\n    open,\r\n    onClose,\r\n    description,\r\n    className,\r\n    headingType,\r\n    title\r\n  } = props;\r\n  return <ModalSuccessContainer className={className}>\r\n    <MainModal\r\n      ariaModal={open}\r\n      className=\"modal-success-dialog\"\r\n    >\r\n      <div className=\"modal-success-topbar\">\r\n        <Heading4 className=\"modal-success-title\">\r\n          <HeadingElement\r\n            heading={headingType}\r\n            text={title || 'Error'}\r\n          />\r\n        </Heading4>\r\n\r\n        <div className=\"modal-close-icon\">\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"modal-success-content\">\r\n        <BodyText className=\"modal-success-description\">\r\n          <p>{description}</p>\r\n        </BodyText>\r\n\r\n        <div className=\"modal-success-button\">\r\n          <ButtonColor\r\n            id=\"handle-values-button\"\r\n            text=\"Accept\"\r\n            height='medium'\r\n            type=\"primary\"\r\n            color={{\r\n              primary: colors.blueMedium,\r\n              secondary: colors.white,\r\n              text: colors.white\r\n            }}\r\n            onClick={() => onClose()}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    </MainModal>\r\n  </ModalSuccessContainer>\r\n}\r\n\r\nexport default ModalSuccess;","import styled from \"styled-components\";\r\nimport { colors } from \"../../assets/colors/colors\";\r\n\r\nconst InputTextContainer = styled.div`\r\n  width: 100%;\r\n\r\n  .input-text-label {\r\n    color: ${colors.lightGrey};\r\n    font-weight: 600;\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .input-text-wrapper {\r\n    border-radius: 4px;\r\n    height: 48px;\r\n    padding: 0 16px;\r\n    background: ${colors.background};\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .input-text-icon-left {\r\n      width: 16px;\r\n      height: 16px;\r\n      min-width: 16px;\r\n      min-height: 16px;\r\n      max-width: 16px;\r\n      max-height: 16px;\r\n      margin-right: 16px;\r\n    }\r\n\r\n    .input-text-container {\r\n      cursor: text;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      width: 100%;\r\n      height: 100%;\r\n\r\n      &.active {\r\n        .input-text {\r\n          max-height: 24px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .input-text-label {\r\n      cursor: text;\r\n      width: 100%;\r\n      transition: 0.3s all ease-in-out;\r\n    }\r\n\r\n    .input-text {\r\n      width: 100%;\r\n      height: 100%;\r\n      transition: 0.3s all ease-in-out;\r\n      overflow: hidden;\r\n      max-height: 0;\r\n      min-height: 0;\r\n      color: #fff;\r\n\r\n      .formatted-input-text {\r\n        height: 100%;\r\n      }\r\n      input {\r\n        width: 100%;\r\n        height: 100%;\r\n        font-size: 16px;\r\n        color: ${colors.midGrey}; \r\n\r\n        &::placeholder {\r\n          color: ${colors.midGrey};\r\n        }\r\n      }\r\n    }\r\n\r\n    .input-text-icon-right {\r\n      width: 16px;\r\n      height: 16px;\r\n      min-width: 16px;\r\n      min-height: 16px;\r\n      max-width: 16px;\r\n      max-height: 16px;\r\n      margin-left: 16px;\r\n    }\r\n  }\r\n\r\n  .input-text-error {\r\n    width: 100%;\r\n    padding-left: 16px;\r\n    margin-top: 8px;\r\n    font-family: \"Roboto Medium\";\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    color: ${colors.red};\r\n  }\r\n\r\n  &.disabled {\r\n    .input-text-wrapper {\r\n      .input-text-container {\r\n        cursor: auto;\r\n      }\r\n\r\n      .input-text-label {\r\n        color: #A1B4C4;\r\n      }\r\n\r\n      .input-text {\r\n        color: #A1B4C4;\r\n\r\n        input {\r\n          color: #A1B4C4;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &.error {\r\n    .input-text-wrapper {\r\n      background:${colors.lightRed};\r\n\r\n      .input-text-label {\r\n        color: #D44B50;\r\n      }\r\n\r\n      .input-text-icon-left {\r\n        svg {\r\n          rect {\r\n            fill: #D44B50;\r\n          }\r\n\r\n          path {\r\n            fill: #D44B50;\r\n          }\r\n        }\r\n      }\r\n\r\n      .input-text-icon-right {\r\n        svg {\r\n          rect {\r\n            fill: #D44B50;\r\n          }\r\n\r\n          path {\r\n            fill: #D44B50;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default InputTextContainer;\r\n","import styled from \"styled-components\";\r\n\r\nconst LabelText = styled.div`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nexport default LabelText;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport InputTextContainer from \"./input-text-style\";\r\nimport { useDetectPlatform } from \"../../hooks/useDetectDesktop/use-detect-platform\";\r\nimport Cleave from 'cleave.js/react'\r\nimport Svg from \"../svg/svg\";\r\nimport LabelText from \"../text/label-text/label-text\";\r\n\r\ninterface InputTextProps {\r\n  label?: string;\r\n  value?: string;\r\n  errorText?: string;\r\n  placeholder?: string;\r\n  type?: string;\r\n  format?: any;\r\n  icon?: {\r\n    left?: string;\r\n    right?: string;\r\n  };\r\n  events?: {\r\n    onChange?: (event: any) => void;\r\n    onBlur?: (event: any) => void;\r\n    onFocus?: (event?: any) => void;\r\n  };\r\n  disabled?: boolean;\r\n}\r\n\r\nconst useLabelAnimation = (initialValue: boolean, format?: boolean) => {\r\n  const [isInputActive, setIsInputActive] = useState<boolean>(initialValue);\r\n  const inputRef = useRef(null);\r\n  const { platform } = useDetectPlatform({ maxMobile: 480 });\r\n\r\n  const changeIsInputActive = (show: boolean) => {\r\n    setIsInputActive(show);\r\n    if (show) {\r\n      if (format) {\r\n        inputRef?.current.childNodes[0].focus();\r\n      }\r\n      inputRef?.current.focus();\r\n\r\n      if (platform === \"mobile\") {\r\n        const scrollElement =\r\n          window.document.scrollingElement ||\r\n          window.document.body ||\r\n          window.document.documentElement;\r\n\r\n        const windowHeight = window.innerHeight;\r\n        const input: any = inputRef?.current;\r\n        const inputTopScroll = input?.offsetTop;\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    isInputActive,\r\n    changeIsInputActive,\r\n    inputRef,\r\n  };\r\n};\r\n\r\nconst useInputValue = (initialValue: string) => {\r\n  const [inputValue, setInputValue] = useState<string>(initialValue);\r\n\r\n  const changeInputValue = (newInputValue: string) => {\r\n    setInputValue(newInputValue);\r\n  };\r\n\r\n  return {\r\n    inputValue,\r\n    changeInputValue,\r\n  };\r\n};\r\n\r\nconst useInputText = (props: InputTextProps) => {\r\n  const { value, events, disabled, label, format } = props;\r\n  const { isInputActive, changeIsInputActive, inputRef } = useLabelAnimation(\r\n    label ? (value ? true : false) : true,\r\n    format,\r\n  );\r\n  const { inputValue, changeInputValue } = useInputValue(value || \"\");\r\n\r\n  useEffect(() => {\r\n    changeInputValue(value)\r\n  }, [value])\r\n\r\n  const handleChange = (event: any) => {\r\n    changeInputValue(event.target.value);\r\n\r\n    if (label) {\r\n      // if (!event.target.value) {\r\n      //   changeIsInputActive(false);\r\n      // }\r\n    }\r\n\r\n    if (events?.onChange) {\r\n      events.onChange(event);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (event: any) => {\r\n    changeInputValue(event.target.value);\r\n\r\n    if (label) {\r\n      if (!event.target.value) {\r\n        changeIsInputActive(false);\r\n      }\r\n    }\r\n\r\n    if (events?.onBlur) {\r\n      events.onBlur(event);\r\n    }\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleBlur,\r\n    isInputActive,\r\n    changeIsInputActive,\r\n    inputRef,\r\n    inputValue,\r\n  };\r\n};\r\n\r\nconst InputText: React.FC<InputTextProps> = (props: InputTextProps) => {\r\n  const {\r\n    label,\r\n    value,\r\n    errorText,\r\n    icon,\r\n    events,\r\n    disabled,\r\n    placeholder,\r\n    type,\r\n    format,\r\n  } = props;\r\n  const {\r\n    handleChange,\r\n    handleBlur,\r\n    isInputActive,\r\n    changeIsInputActive,\r\n    inputRef,\r\n    inputValue,\r\n  } = useInputText(props);\r\n\r\n  return (\r\n    <InputTextContainer\r\n      className={`${disabled ? \"disabled\" : \"\"} ${errorText ? \"error\" : \"\"}`}\r\n    >\r\n      {label && (\r\n        <LabelText className=\"input-text-label\">\r\n          <label>{label}</label>\r\n        </LabelText>\r\n      )}\r\n      <div className=\"input-text-wrapper\">\r\n        {icon && icon.left && (\r\n          <div className=\"input-text-icon-left\">\r\n            <Svg src={icon.left} />\r\n          </div>\r\n        )}\r\n\r\n        <div\r\n          className={`input-text-container active`}\r\n        >\r\n          <div className=\"input-text\">\r\n            {!format ? (\r\n              <input\r\n                aria-label={label || \"input-text-label\"}\r\n                ref={inputRef}\r\n                value={inputValue}\r\n                disabled={disabled}\r\n                onChange={(event: any) => handleChange(event)}\r\n                onBlur={(event: any) => handleBlur(event)}\r\n                placeholder={placeholder}\r\n                type={type}\r\n              />\r\n            ) : (\r\n              <div ref={inputRef} className=\"formatted-input-text\">\r\n                <Cleave\r\n                  aria-label={label || \"input-text-label\"}\r\n                  value={inputValue}\r\n                  disabled={disabled}\r\n                  onChange={(event: any) => handleChange(event)}\r\n                  onBlur={(event: any) => handleBlur(event)}\r\n                  placeholder={placeholder}\r\n                  type={type}\r\n                  options={format}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {icon && icon.right && (\r\n          <div className=\"input-text-icon-right\">\r\n            <Svg src={icon.right} />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && (\r\n        <div className=\"input-text-error\">\r\n          <p>{errorText}</p>\r\n        </div>\r\n      )}\r\n    </InputTextContainer>\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n","import styled from \"styled-components\";\r\nimport { screenSizes } from \"../../constants/screens\";\r\n\r\nconst HandleValuesFormContainer = styled.div`\r\n  .handle-values-form {\r\n    margin-bottom: 24px;\r\n\r\n    .handle-values-field {\r\n      margin-bottom: 16px;\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      margin-bottom: 32px;\r\n    }\r\n  }\r\n\r\n  .handle-values-buttons {\r\n    .fill-button {\r\n      width: 100%;\r\n      margin-bottom: 16px; \r\n\r\n      @media screen and (min-width: ${screenSizes.ipad}px){ \r\n        width: calc((100% - 16px) / 2);\r\n        margin-right: 16px; \r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    .submit-button {\r\n      width: 100%;\r\n      \r\n      button {\r\n        width: 100%; \r\n      }\r\n\r\n      @media screen and (min-width: ${screenSizes.ipad}px){ \r\n        width: calc((100% - 16px) / 2);\r\n      }\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      display: flex; \r\n      align-items: center; \r\n    }\r\n  }\r\n\r\n  \r\n`\r\n\r\nexport default HandleValuesFormContainer","import React from 'react'\r\nimport { colors } from '../../assets/colors/colors';\r\nimport ButtonColor from '../../components/buttons/button-color/button-color';\r\nimport InputText from '../../components/input-text/input-text';\r\nimport useForm from '../../hooks/useForm/use-form';\r\nimport { IFormValidations, ISubmitUseFormParams, IUseForm, IValidation } from '../../hooks/useForm/use-form-types';\r\nimport { EmailValidation, RequiredValidation } from '../../hooks/useForm/use-form-validations';\r\nimport HandleValuesFormContainer from './handle-values-form-style'\r\n\r\ninterface HandleValuesFormProps {\r\n  formActions: any\r\n}\r\nconst HandleValuesForm: React.FC<HandleValuesFormProps> = (props: HandleValuesFormProps) => {\r\n  const { formActions } = props;\r\n\r\n  return <HandleValuesFormContainer>\r\n    <form\r\n      className=\"handle-values-form\"\r\n      id=\"handle-values-form\"\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n        formActions.onSubmit()\r\n      }}\r\n    >\r\n      <div className=\"handle-values-field\">\r\n        <InputText\r\n          label=\"Name*\"\r\n          placeholder=\"Name\"\r\n          value={formActions.values.name}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'name')\r\n          }}\r\n          errorText={formActions.errorValues.name.errorText}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"handle-values-field\">\r\n        <InputText\r\n          label=\"Surname\"\r\n          placeholder=\"Surname\"\r\n          value={formActions.values.surname}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'surname')\r\n          }}\r\n          errorText={formActions.errorValues.surname.errorText}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"handle-values-field\">\r\n        <InputText\r\n          label=\"Email*\"\r\n          placeholder=\"Email\"\r\n          value={formActions.values.email}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'email')\r\n          }}\r\n          errorText={formActions.errorValues.email.errorText}\r\n        />\r\n      </div>\r\n\r\n    </form>\r\n\r\n\r\n    <div className=\"handle-values-buttons\">\r\n      <div className=\"fill-button\">\r\n        <ButtonColor\r\n          id=\"handle-values-button\"\r\n          role='button'\r\n          text=\"Fill surname and email\"\r\n          height='medium'\r\n          type=\"primary\"\r\n          color={{\r\n            primary: colors.white,\r\n            secondary: colors.blueMedium,\r\n            text: colors.blueMedium\r\n          }}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            formActions.handleFillButton();\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"submit-button\">\r\n        <button form='handle-values-form'>\r\n          <ButtonColor\r\n            id=\"handle-values-button\"\r\n            text=\"Submit\"\r\n            height='medium'\r\n            type=\"primary\"\r\n            color={{\r\n              primary: colors.blueMedium,\r\n              secondary: colors.white,\r\n              text: colors.white\r\n            }}\r\n          />\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n  </HandleValuesFormContainer>\r\n}\r\n\r\nexport default HandleValuesForm","import { useState } from 'react';\r\nimport {\r\n  Error,\r\n  IDefaultFormValues,\r\n  IErrorValues,\r\n  IUseValuesParams,\r\n  IUseValues,\r\n  IUseFormParams,\r\n  IUseForm,\r\n  IValidation\r\n} from './use-form-types';\r\n\r\nconst DEFAULT_ERROR_NOTIFY = 'Hemos encontrado algunos errores.';\r\n\r\nconst useValues: IUseValues = <\r\n  IFormValues = IDefaultFormValues\r\n>(\r\n  params: IUseValuesParams<IFormValues>\r\n) => {\r\n  type ErrorValues = IErrorValues<IFormValues>\r\n\r\n  const [values, setValues] = useState<IFormValues>(params.initialValues);\r\n\r\n  let initialErrors: any = { ...values };\r\n\r\n  Object.keys(initialErrors).map((key: string) => {\r\n    initialErrors[key] = {\r\n      error: false,\r\n      errorText: ''\r\n    };\r\n  });\r\n\r\n  const [errorValues, setErrorValues] = useState<ErrorValues>({\r\n    ...initialErrors\r\n  });\r\n\r\n  const resetErrorValues = () => {\r\n    let initialErrors: any = { ...values };\r\n\r\n    Object.keys(initialErrors).map((key: string) => {\r\n      initialErrors[key] = {\r\n        error: false,\r\n        errorText: ''\r\n      };\r\n    });\r\n\r\n    setErrorValues(initialErrors);\r\n  };\r\n\r\n  const forceErrorValues = (newErrorValues: ErrorValues) => {\r\n    setErrorValues(newErrorValues);\r\n  };\r\n\r\n  const handleFieldEvent = (val: any, name: string) => {\r\n    setValues({\r\n      ...values,\r\n      [name]: val\r\n    });\r\n\r\n    let newError: Error = {\r\n      error: false,\r\n      errorText: ''\r\n    };\r\n    const { formValidations } = params;\r\n\r\n    const valueValidations: IValidation[] = formValidations[name];\r\n\r\n    const valueValidation: IValidation | undefined = valueValidations.find(\r\n      validation => !validation.method(val, name)\r\n    );\r\n\r\n    if (valueValidation) {\r\n      newError = {\r\n        error: true,\r\n        errorText: valueValidation.errorText\r\n      };\r\n    }\r\n\r\n    setErrorValues({\r\n      ...errorValues,\r\n      [name]: newError\r\n    });\r\n  };\r\n\r\n  const setAGroupOfValues = (newValues: { [key: string]: any }) => {\r\n    const keys = Object.keys(newValues);\r\n    let changedValues = {\r\n      ...values\r\n    };\r\n\r\n    let newErrorValues = {\r\n      ...errorValues\r\n    };\r\n\r\n    const { formValidations } = params;\r\n\r\n    for (const newValueKey of keys) {\r\n      let isFormKey = Object.keys(values).indexOf(newValueKey) !== -1;\r\n      if (isFormKey) {\r\n        let newValue = newValues[newValueKey];\r\n        changedValues[newValueKey] = newValue;\r\n\r\n        let valueValidations: IValidation[] = formValidations[newValueKey];\r\n        let valueValidation: IValidation | undefined = valueValidations.find(\r\n          validation => !validation.method(newValue, newValueKey)\r\n        );\r\n\r\n        if (valueValidation) {\r\n          newErrorValues = {\r\n            ...newErrorValues,\r\n            [newValueKey]: {\r\n              error: true,\r\n              errorText: valueValidation.errorText\r\n            }\r\n          };\r\n        }\r\n      }\r\n    }\r\n    setValues(changedValues);\r\n    setErrorValues(newErrorValues);\r\n  };\r\n\r\n  return {\r\n    values,\r\n    errorValues,\r\n    handleFieldEvent,\r\n    forceErrorValues,\r\n    resetErrorValues,\r\n    setAGroupOfValues\r\n  };\r\n};\r\n\r\nconst useForm: IUseForm = <\r\n  IFormValues = IDefaultFormValues\r\n>(\r\n  params: IUseFormParams<IFormValues>\r\n) => {\r\n  type ErrorValues = IErrorValues<IFormValues>\r\n\r\n  const [errorTextForm, setErrorTextForm] = useState<string>('');\r\n\r\n  const { initialValues, formValidations, submit } = params;\r\n\r\n  const formActions = useValues<IFormValues>({\r\n    initialValues,\r\n    formValidations,\r\n  });\r\n\r\n  const changeErrorTextForm = (textError: string) => {\r\n    setErrorTextForm(textError);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const { formValidations } = params;\r\n    let valid: boolean = true;\r\n\r\n    const values: IFormValues = formActions.values;\r\n\r\n    let newErrorValues: ErrorValues = { ...formActions.errorValues };\r\n\r\n    let inputError: Error = {\r\n      error: false,\r\n      errorText: ''\r\n    };\r\n\r\n    let valueValidation: IValidation | undefined = undefined;\r\n\r\n    Object.keys(values).map((key: string) => {\r\n      inputError = {\r\n        error: false,\r\n        errorText: ''\r\n      };\r\n\r\n      valueValidation = formValidations[key].find(\r\n        validation => !validation.method(values[key], key)\r\n      );\r\n\r\n      if (valueValidation) {\r\n        valid = false;\r\n        inputError = {\r\n          error: true,\r\n          errorText: valueValidation.errorText\r\n        };\r\n      }\r\n\r\n      newErrorValues = {\r\n        ...newErrorValues,\r\n        [key]: inputError\r\n      };\r\n    });\r\n    formActions.forceErrorValues(newErrorValues);\r\n\r\n    return valid;\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    formActions.resetErrorValues();\r\n\r\n    const isValid: boolean = validateForm();\r\n\r\n    if (isValid) {\r\n      submit({\r\n        values: formActions.values,\r\n        errorValues: formActions.errorValues,\r\n        changeErrorText: changeErrorTextForm\r\n      });\r\n    } else {\r\n      setErrorTextForm(params.defaultErrorValue || DEFAULT_ERROR_NOTIFY);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return {\r\n    ...formActions,\r\n    errorTextForm,\r\n    onSubmit,\r\n    changeErrorTextForm,\r\n    setAGroupOfValues: formActions.setAGroupOfValues\r\n  };\r\n};\r\n\r\nexport default useForm;","import { Validator } from \"class-validator\";\r\nimport {\r\n  IValidation,\r\n  IDefaultValidation,\r\n  IPhoneRegion,\r\n  IMobileLocale,\r\n  IRequired,\r\n  IEmail,\r\n  IEquals,\r\n  IUrl,\r\n  ICreditCard,\r\n  IPhone,\r\n  IMobile,\r\n  IErrorTextValidation,\r\n  IEqualsParams,\r\n  IPhoneParams,\r\n  IMobileParams,\r\n  IIban,\r\n  IMinLengthValidation,\r\n} from \"./use-form-types\";\r\n\r\nvar IBAN = require(\"iban\");\r\n\r\nconst validations = new Validator();\r\n\r\nexport const RequiredValidation: IRequired = <IValue = string | boolean>(params?: IErrorTextValidation) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: IValue, name: string) => (!value ? false : true),\r\n    errorText: params?.errorText || \"Required field\",\r\n  };\r\n};\r\n\r\nexport const EmailValidation: IEmail = (params?: IErrorTextValidation) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.isEmail(value),\r\n    errorText: params?.errorText || \"Invalid email\",\r\n  };\r\n};\r\n\r\nexport const MinLengthValidation: IMinLengthValidation = (params) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.minLength(value, params.minLength),\r\n    errorText: params.errorText || `Must have at least ${params.minLength} characters`,\r\n  };\r\n};\r\n\r\nexport const EqualsValidation: IEquals = <IValue = string | boolean>(params: IEqualsParams) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: IValue, name: string, formValues: any) => formValues[params.compareName] === value,\r\n    errorText: params.errorText || `The field is not equal with the ${params.compareName} field`,\r\n  };\r\n};\r\n\r\nexport const UrlValidation: IUrl = (params: IErrorTextValidation) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.isEmail(value),\r\n    errorText: params.errorText || \"Invalid url\",\r\n  };\r\n};\r\n\r\nexport const CreditCardValidation: ICreditCard = (params: IErrorTextValidation) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.isCreditCard(value),\r\n    errorText: params.errorText || \"Invalid credit card\",\r\n  };\r\n};\r\n\r\nexport const PhoneValidation: IPhone = (params: IPhoneParams) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.isPhoneNumber(value, params.region),\r\n    errorText: params.errorText || \"Invalid phone\",\r\n  };\r\n};\r\n\r\nexport const MobileValidation: IMobile = (params: IMobileParams) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => validations.isPhoneNumber(value, params.region),\r\n    errorText: params.errorText || \"Invalid phone\",\r\n  };\r\n};\r\n\r\nexport const IBANValidation: IIban = (params: IErrorTextValidation) => {\r\n  return {\r\n    tag: \"REQUIRED\",\r\n    method: (value: string, name: string) => IBAN.isValid(value),\r\n    errorText: params.errorText || \"Invalid Iban\",\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\nimport { colors } from \"../../assets/colors/colors\";\r\nimport { screenSizes } from \"../../constants/screens\";\r\n\r\nconst HandleValuesPageContainer = styled.div`\r\n  margin: 24px 16px;\r\n\r\n  .handle-values-wrapper {\r\n    width: 100%;\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      width: 60%;\r\n      max-width: 572px;\r\n      border: 1px solid ${colors.lightBlue};\r\n      border-radius: 16px;\r\n      padding: 24px;\r\n    }\r\n  }\r\n\r\n  .handle-values-title {\r\n    color: ${colors.white};\r\n    margin-bottom: 24px;\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      text-align: center; \r\n    }\r\n  }\r\n\r\n  .handle-values-description {\r\n    color: ${colors.midGrey};\r\n    margin-bottom: 24px;\r\n\r\n    p {\r\n      margin-bottom: 8px; \r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      text-align: center; \r\n\r\n      p {\r\n        margin-bottom: 16px;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: ${screenSizes.ipad}px){ \r\n    margin: 64px 7%; \r\n    display: flex; \r\n    justify-content: center; \r\n  }\r\n`\r\n\r\nexport default HandleValuesPageContainer","import React, { useState } from 'react'\r\nimport ModalSuccess from '../../components/modals/modal-success/modal-success'\r\nimport BodyText from '../../components/text/body-text/body-text'\r\nimport Heading4 from '../../components/text/heading4/heading4'\r\nimport HandleValuesForm from '../../containers/handle-values-form/handle-values-form'\r\nimport useForm from '../../hooks/useForm/use-form'\r\nimport { IFormValidations, ISubmitUseFormParams, IValidation } from '../../hooks/useForm/use-form-types'\r\nimport { EmailValidation, RequiredValidation } from '../../hooks/useForm/use-form-validations'\r\nimport HandleValuesPageContainer from './handle-values-style'\r\n\r\ninterface IFormValues {\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n}\r\n\r\nconst requiredValidation: IValidation = RequiredValidation();\r\nconst emailValidation: IValidation = EmailValidation()\r\n\r\nconst formValidations: IFormValidations<IFormValues> = {\r\n  name: [requiredValidation],\r\n  surname: [],\r\n  email: [requiredValidation, emailValidation]\r\n}\r\n\r\nconst useHandleValuesForm = () => {\r\n  const [submitModal, setSubmitModal] = useState<boolean>(false)\r\n\r\n  const initialValues: IFormValues = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n  }\r\n\r\n  const submit = (params: ISubmitUseFormParams<IFormValues>) => {\r\n    console.log(params.values)\r\n    setSubmitModal(true);\r\n  }\r\n\r\n  const formActions = useForm<IFormValues>(\r\n    {\r\n      initialValues,\r\n      formValidations,\r\n      submit\r\n    }\r\n  )\r\n\r\n  const handleFillButton = () => {\r\n    const newValues = {\r\n      surname: 'Example',\r\n      email: \"example@example.com\"\r\n    }\r\n\r\n    formActions.setAGroupOfValues(newValues)\r\n  }\r\n\r\n  return {\r\n    ...formActions,\r\n    handleFillButton,\r\n    submitModal,\r\n    setSubmitModal\r\n  }\r\n}\r\n\r\nconst HandleValuesPage: React.FC = () => {\r\n  const actions = useHandleValuesForm()\r\n\r\n  return <HandleValuesPageContainer>\r\n    <div className=\"handle-values-wrapper\">\r\n      <Heading4 className=\"handle-values-title\">\r\n        <h1>SetAGroupOfValues Form</h1>\r\n      </Heading4>\r\n\r\n      <BodyText className=\"handle-values-description\">\r\n        <p>In this form we are going to autocomplete using setAGroupOfValues. </p>\r\n        <p>This function is responsible for changing a group of values in the form.</p>\r\n        <p>There's no need to pass the entire form object as a parameter, only the values you want to change.</p>\r\n      </BodyText>\r\n\r\n      <div className=\"handle-values-form-container\">\r\n        <HandleValuesForm\r\n          formActions={actions}\r\n        />\r\n      </div>\r\n\r\n      {\r\n        actions.submitModal &&\r\n        <ModalSuccess\r\n          onClose={() => actions.setSubmitModal(false)}\r\n          open={actions.submitModal}\r\n          title=\"Submit Form\"\r\n          description={`Values: ${actions.values.name} ${actions.values.surname} and ${actions.values.email}`}\r\n          className=\"handle-values-submit\"\r\n          headingType=\"h2\"\r\n        />\r\n      }\r\n    </div>\r\n  </HandleValuesPageContainer>\r\n}\r\n\r\nexport default HandleValuesPage","import styled from 'styled-components';\r\nimport { colors } from '../../assets/colors/colors';\r\nimport { screenSizes } from '../../constants/screens';\r\n\r\nconst MainHeaderContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  z-index: 900;\r\n  background-color: ${colors.black};\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white; \r\n\r\n  @media screen and (min-width: ${screenSizes.ipad}px){ \r\n    height: 64px;\r\n    padding: 0 64px;\r\n    justify-content: flex-start;\r\n\r\n  }\r\n\r\n`\r\nexport default MainHeaderContainer;","import React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { routes } from '../../constants/routes';\r\nimport { screenSizes } from '../../constants/screens';\r\nimport { useDetectPlatform } from '../../hooks/useDetectDesktop/use-detect-platform';\r\nimport Heading3 from '../text/heading3/heading3';\r\nimport Heading4 from '../text/heading4/heading4';\r\nimport MainHeaderContainer from './main-header-style';\r\n\r\n\r\n\r\nconst MainHeader: React.FC = () => {\r\n  const { platform } = useDetectPlatform({ maxMobile: screenSizes.ipad });\r\n\r\n  return <MainHeaderContainer>\r\n    {\r\n      platform === \"mobile\" ?\r\n        <Heading4 className=\"main-header-logo\">\r\n          <Link to={routes.home}>\r\n            <p>Use Form</p>\r\n          </Link>\r\n        </Heading4>\r\n        :\r\n        <Heading3 className=\"main-header-logo\">\r\n          <Link to={routes.home}>\r\n            <p>Use Form</p>\r\n          </Link>\r\n        </Heading3>\r\n    }\r\n  </MainHeaderContainer>\r\n}\r\n\r\nexport default MainHeader;\r\n","import styled from 'styled-components'\r\nimport { screenSizes } from '../../constants/screens'\r\n\r\nconst MainLayoutContainer = styled.div`\r\n  .main-content {\r\n    width: 100%;\r\n    padding-top: 56px;\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      padding-top: 80px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default MainLayoutContainer","import React from \"react\";\r\nimport MainHeader from \"../main-header/main-header\";\r\nimport MainLayoutContainer from \"./main-layout-style\";\r\n\r\ninterface MainLayoutProps {\r\n  children: any;\r\n}\r\n\r\nconst MainLayout: React.FC<MainLayoutProps> = (props: MainLayoutProps) => {\r\n  return <MainLayoutContainer>\r\n    <header className=\"main-header\">\r\n      <MainHeader />\r\n    </header>\r\n    <main className=\"main-content\">\r\n      {props.children}\r\n    </main>\r\n  </MainLayoutContainer>\r\n}\r\n\r\nexport default MainLayout","import styled from \"styled-components\";\r\nimport { screenSizes } from \"../../constants/screens\";\r\n\r\nconst HandleValueFormContainer = styled.div`\r\n  .handle-value-form {\r\n    margin-bottom: 24px; \r\n\r\n    .handle-value-field {\r\n      margin-bottom: 16px; \r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      margin-bottom: 32px;\r\n    }\r\n  }\r\n\r\n  .handle-value-button {\r\n    margin: 0 auto; \r\n    width: 100%;\r\n\r\n    button {\r\n      width: 100%;\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      margin: 0 auto; \r\n      width: 140px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default HandleValueFormContainer; ","import React from 'react'\r\nimport { colors } from '../../assets/colors/colors';\r\nimport ButtonColor from '../../components/buttons/button-color/button-color';\r\nimport InputText from '../../components/input-text/input-text';\r\nimport useForm from '../../hooks/useForm/use-form';\r\nimport { IFormValidations, ISubmitUseFormParams, IValidation } from '../../hooks/useForm/use-form-types';\r\nimport { EmailValidation, RequiredValidation } from '../../hooks/useForm/use-form-validations'\r\nimport HandleValueFormContainer from './handle-value-form-style'\r\n\r\ninterface HandleValueFormProps {\r\n  formActions: any;\r\n}\r\n\r\nconst HandleValueForm: React.FC<HandleValueFormProps> = (props: HandleValueFormProps) => {\r\n  const { formActions } = props\r\n  return <HandleValueFormContainer>\r\n    <form\r\n      className=\"handle-value-form\"\r\n      id=\"handle-value-form\"\r\n      onSubmit={(event) => {\r\n        event.preventDefault()\r\n        formActions.onSubmit()\r\n      }}\r\n    >\r\n      <div className=\"handle-value-field\">\r\n        <InputText\r\n          label=\"Name*\"\r\n          placeholder=\"Name\"\r\n          value={formActions.values.name}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'name')\r\n          }}\r\n          errorText={formActions.errorValues.name.errorText}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"handle-value-field\">\r\n        <InputText\r\n          label=\"Surname\"\r\n          placeholder=\"Surname\"\r\n          value={formActions.values.surname}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'surname')\r\n          }}\r\n          errorText={formActions.errorValues.surname.errorText}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"handle-value-field\">\r\n        <InputText\r\n          label=\"Email*\"\r\n          placeholder=\"Email\"\r\n          value={formActions.values.email}\r\n          events={{\r\n            onBlur: (event: any) => formActions.handleFieldEvent(event.target.value, 'email')\r\n          }}\r\n          errorText={formActions.errorValues.email.errorText}\r\n        />\r\n      </div>\r\n\r\n    </form>\r\n\r\n    <div className=\"handle-value-button\">\r\n      <button\r\n        form='handle-value-form'\r\n      >\r\n        <ButtonColor\r\n          id=\"handle-value-button\"\r\n          text=\"Submit\"\r\n          height='medium'\r\n          type=\"primary\"\r\n          color={{\r\n            primary: colors.blueMedium,\r\n            secondary: colors.white,\r\n            text: colors.white\r\n          }}\r\n        />\r\n      </button>\r\n    </div>\r\n  </HandleValueFormContainer>\r\n}\r\n\r\nexport default HandleValueForm","import styled from \"styled-components\";\r\nimport { colors } from \"../../assets/colors/colors\";\r\nimport { screenSizes } from \"../../constants/screens\";\r\n\r\nconst HandleValuePageContainer = styled.div`\r\n  margin: 24px 16px;\r\n\r\n  .handle-value-wrapper {\r\n    width: 100%; \r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      width: 60%;\r\n      max-width: 572px;\r\n      border: 1px solid ${colors.lightBlue};\r\n      border-radius: 16px;\r\n      padding: 24px;\r\n    }\r\n  }\r\n\r\n  .handle-value-title {\r\n    color: ${colors.white};\r\n    margin-bottom: 24px;\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      text-align: center; \r\n    }\r\n  }\r\n\r\n  .handle-value-description {\r\n    color: ${colors.midGrey};\r\n    margin-bottom: 24px;\r\n\r\n    p {\r\n      margin-bottom: 8px; \r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    @media screen and (min-width: ${screenSizes.ipad}px){ \r\n      text-align: center; \r\n\r\n      p {\r\n        margin-bottom: 16px;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: ${screenSizes.ipad}px){ \r\n    margin: 64px 7%; \r\n    display: flex; \r\n    justify-content: center; \r\n  }\r\n\r\n`\r\nexport default HandleValuePageContainer; ","import React, { useState } from \"react\";\r\nimport ModalSuccess from \"../../components/modals/modal-success/modal-success\";\r\nimport BodyText from \"../../components/text/body-text/body-text\";\r\nimport Heading4 from \"../../components/text/heading4/heading4\";\r\nimport HandleValueForm from \"../../containers/handle-value-form/handle-value-form\";\r\nimport useForm from \"../../hooks/useForm/use-form\";\r\nimport { IFormValidations, ISubmitUseFormParams, IValidation } from \"../../hooks/useForm/use-form-types\";\r\nimport { EmailValidation, RequiredValidation } from \"../../hooks/useForm/use-form-validations\";\r\nimport HandleValuePageContainer from \"./handle-value-style\";\r\n\r\ninterface IFormValues {\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n}\r\n\r\nconst requiredValidation: IValidation = RequiredValidation();\r\nconst emailValidation: IValidation = EmailValidation()\r\n\r\nconst formValidations: IFormValidations<IFormValues> = {\r\n  name: [requiredValidation],\r\n  surname: [],\r\n  email: [requiredValidation, emailValidation]\r\n}\r\n\r\n\r\nconst useHandleValueForm = () => {\r\n  const [submitModal, setSubmitModal] = useState<boolean>(false)\r\n\r\n  const initialValues: IFormValues = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n  }\r\n\r\n  const submit = (params: ISubmitUseFormParams<IFormValues>) => {\r\n    console.log(params.values)\r\n    setSubmitModal(true)\r\n  }\r\n\r\n  const formActions = useForm<IFormValues>(\r\n    {\r\n      initialValues,\r\n      formValidations,\r\n      submit\r\n    }\r\n  )\r\n\r\n  return {\r\n    ...formActions,\r\n    submitModal,\r\n    setSubmitModal\r\n  }\r\n}\r\n\r\nconst HandleValuePage: React.FC = () => {\r\n  const actions = useHandleValueForm()\r\n\r\n  return <HandleValuePageContainer>\r\n    <div className=\"handle-value-wrapper\">\r\n      <Heading4 className=\"handle-value-title\">\r\n        <h1>HandleFieldValue Form</h1>\r\n      </Heading4>\r\n\r\n      <BodyText className=\"handle-value-description\">\r\n        <p>In this form we change the form state using the handleFieldEvent. </p>\r\n        <p>This function is responsible for changing a single value of the form.</p>\r\n        <p>Using it multiple times in a single change event is not recomended, because, the form is going to change only the last value changed.</p>\r\n      </BodyText>\r\n\r\n      <div className=\"handle-value-form-container\">\r\n        <HandleValueForm\r\n          formActions={actions}\r\n        />\r\n      </div>\r\n\r\n      {\r\n        actions.submitModal &&\r\n        <ModalSuccess\r\n          onClose={() => actions.setSubmitModal(false)}\r\n          open={actions.submitModal}\r\n          title=\"Submit Form\"\r\n          description={`Values: ${actions.values.name} ${actions.values.surname} and ${actions.values.email}`}\r\n          className=\"handle-values-submit\"\r\n          headingType=\"h2\"\r\n        />\r\n      }\r\n    </div>\r\n  </HandleValuePageContainer>\r\n}\r\n\r\nexport default HandleValuePage;","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport MainModal from \"./components/modals/main-modal/main-modal\";\r\nimport Svg from \"./components/svg/svg\";\r\nimport { icons } from \"./assets/icons/icons\";\r\nimport MainHeader from \"./components/main-header/main-header\";\r\nimport {\r\n  HashRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport HomePage from \"./pages/home/home\";\r\nimport HandleValuesPage from \"./pages/handle-values/handle-values\";\r\nimport MainLayout from \"./components/main-layout/main-layout\";\r\nimport { routes } from \"./constants/routes\";\r\nimport HandleValuePage from \"./pages/handle-value/handle-value\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <HashRouter>\r\n        <MainLayout>\r\n          <Routes>\r\n            <Route path='/' element={<HomePage />} />\r\n            <Route path='handle-value' element={<HandleValuePage />} />\r\n            <Route path='handle-values' element={<HandleValuesPage />} />\r\n          </Routes>\r\n        </MainLayout>\r\n      </HashRouter>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}